{
	"info": {
		"_postman_id": "47145df9-123d-4b51-92f2-19ea919be789",
		"name": "AddClient e2e",
		"description": "Api Documentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "addNewClient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9fb9c7c2-0565-4ba9-917d-6827d0945992",
						"exec": [
							"\r",
							"// var uuid = require('uuid');\r",
							"// pm.globals.set('myId',  uuid.v4());\r",
							"var reqBody = JSON.parse(request.data);\r",
							"pm.globals.set(\"myId\", reqBody.clientId);  \r",
							"\r",
							"postman.setEnvironmentVariable(\"ramdomNumber\",\"{{$randomInt}}\");\r",
							"// postman.setEnvironmentVariable(\"ramdomString\",\"{{$randomString:10}}\");\r",
							"clientStatuses = [\"deactivated\", \"deactivated\",\"deleted\", \"offline\",\"invalid\",\"\",\"activated\"];\r",
							"\r",
							"var currentClient = clientStatuses.shift();\r",
							"\r",
							"postman.setEnvironmentVariable(\"currentClient\",currentClient);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4f7e7147-5180-4637-9e39-14c83b5fa4f6",
						"exec": [
							"var newclient = JSON.parse(request.data);\r",
							"var getId = pm.globals.get(\"myId\");\r",
							"var emailFormath = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r",
							"var emailStart = newclient.config.notificationConfig.emailAddresses.start;\r",
							"var EmailComplete = newclient.config.notificationConfig.emailAddresses.complete;\r",
							"var EmailLst = newclient.config.notificationConfig.emailAddresses.lst;\r",
							"var EmailError = newclient.config.notificationConfig.emailAddresses.error;\r",
							"var docType = newclient.config.documentTypes;\r",
							"var getResponseText = pm.response.text().replace(/[^\\w\\s]/gi, \"\");\r",
							"var clientStatus = (\"deactivated\", \"deleted\", \"offline\", \"activated\");\r",
							"\r",
							"let a, b, c, d, e, f, j, h, i;\r",
							"\r",
							"\r",
							"    for (a in emailStart) {\r",
							"        var emailStartMatch = emailStart[a].match(emailFormath);\r",
							"        if (emailStartMatch === null) {\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"    for (b in EmailComplete) {\r",
							"        var emailCompleteMatch = EmailComplete[b].match(emailFormath);\r",
							"        if (emailCompleteMatch === null) {\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"    for (c in EmailLst) {\r",
							"        var emailLstMatch = EmailLst[c].match(emailFormath);\r",
							"        if (emailLstMatch === null) {\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"    for (d in EmailError) {\r",
							"        var emailErrorMatch = EmailError[d].match(emailFormath);\r",
							"        if (emailErrorMatch === null) {\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"    \r",
							"    for (e in docType) {\r",
							"        if (!docType[e].docTypeName) {\r",
							"            var setFlagdocTypeName = true;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							" //This function assert if search pattern index exits in documnet indexes.\r",
							"      function runIndexTestsPassed(){\r",
							"           pm.test(\"search Pattern Index \"+ docSearchPatt[i] + \" exists in document Indexes\", function() {\r",
							"           console.log(\"search Pattern Index \"+ docSearchPatt[i] + \" exists in document Indexes\");\r",
							"         });\r",
							"    }   \r",
							"    \r",
							"     //This function assert if search pattern index exits in documnet indexes.\r",
							"      function runIndexTestFailed(){\r",
							"           pm.test(\"search Pattern Index \"+ docSearchPatt[i] + \" does not exists in document Indexes\", function() {\r",
							"           console.log(\"search Pattern Index \"+ docSearchPatt[i] + \" does not exists in document Indexes\");\r",
							"         });\r",
							"    }  \r",
							"    \r",
							"//Response duplicate skipt test run\r",
							"        \r",
							"if (getResponseText !== \"ClientID \" + newclient.clientId + \" already existed\") {\r",
							"  \r",
							"  //Response 200 test cases\r",
							"  if (pm.response.code === 200) {\r",
							"    pm.test(\"Status code is 200 for validData\", function() {\r",
							"      pm.response.to.have.status(200);\r",
							"    });\r",
							"    \r",
							"    for (f in docType) {\r",
							"        var docTypeIndexes = (docType[f].documentIndexes);\r",
							"        var docTypesearchPattern = (docType[f].searchPatternIndexes);\r",
							"        \r",
							"        for (h in docTypesearchPattern) {\r",
							"    \r",
							"            var docSearchPatt = docTypesearchPattern[h];\r",
							"    \r",
							"            for (i in docSearchPatt) {\r",
							"                console.log(docSearchPatt[i]);\r",
							"                if (docTypeIndexes.includes(docSearchPatt[i])){\r",
							"                tests[\"search Pattern Index \"+ docSearchPatt[i] + \" does exists in document Indexes\"] = docTypeIndexes.includes(docSearchPatt[i]);\r",
							"                console.log(\"search Pattern Index \"+ docSearchPatt[i] + \" exists in document Indexes\");\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    } \r",
							"  }\r",
							"    \r",
							"       for (f in docType) {\r",
							"        var docTypeIndexes = (docType[f].documentIndexes);\r",
							"        var docTypesearchPattern = (docType[f].searchPatternIndexes);\r",
							"       \r",
							"        for (h in docTypesearchPattern) {\r",
							"    \r",
							"            var docSearchPatt = docTypesearchPattern[h];\r",
							"    \r",
							"            for (i in docSearchPatt) {\r",
							"                if (docTypeIndexes.includes(docSearchPatt[i])===false){\r",
							"               tests[\"search Pattern Index \"+ docSearchPatt[i] + \" does not exists in document Indexes\"] = !docTypeIndexes.includes(docSearchPatt[i]);\r",
							"                console.log(pm.response.text());\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    } \r",
							"     \r",
							"     if (newclient.clientId===\"\" && clientStatus.includes(newclient.status)) {\r",
							"      pm.test(\"Status code is 400 for blank client ID\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\"Client ID is missing\");\r",
							"         console.log(pm.response.text());\r",
							"      });\r",
							"      }\r",
							"      if (!newclient.name  && newclient.status === clientStatus) {\r",
							"      pm.test(\"Status code is 400 for blank name\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\"Client name is missing\");\r",
							"        console.log(pm.response.text());\r",
							"      });\r",
							"       }\r",
							"      if (newclient.status===\"\") {\r",
							"       pm.test(\"Status code is 400 for blank status\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\"[deactivated, deleted, offline, activated]\");\r",
							"        console.log(pm.response.text());\r",
							"       });\r",
							"       }\r",
							"       if (clientStatus.includes(!newclient.status) && newclient.status !== \"\" ) {\r",
							"      pm.test(\"Status code is 400 for invalid status\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"[deactivated, deleted, offline, activated]\");\r",
							"          console.log(pm.response.text());\r",
							"      });\r",
							"       }\r",
							"       if (!newclient.config.dataRetentionMonths) {\r",
							"      pm.test(\"Status code is 400 for blank dataRetentionMonths\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Client data retention setting is missing\");\r",
							"          console.log(pm.response.text());\r",
							"      });\r",
							"     } \r",
							"       if (!newclient.config.sftpConfig.host) {\r",
							"      pm.test(\"Status code is 400 for blank host in sftpConfig\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp host cannot be empty\"\r",
							"        );\r",
							"        console.log(pm.response.text());\r",
							"      });\r",
							"      } \r",
							"      console.log(newclient.config.sftpConfig.username);\r",
							"      if (newclient.config.sftpConfig.username===\"\") {\r",
							"      pm.test(\"Status code is 400 for blank username in sftpConfig\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp username cannot be empty\"\r",
							"        );\r",
							"        console.log(pm.response.text());\r",
							"      });\r",
							"   } \r",
							"     if (!newclient.config.sftpConfig.password) {\r",
							"      pm.test(\"Status code is 400 for blank password in sftpConfig\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp password cannot be empty\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    }\r",
							"     if (!newclient.config.sftpConfig.remoteDir) {\r",
							"      pm.test(\"Status code is 400 for blank remoteDir in sftpConfig\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp remote directory cannot be empty\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"    if (!newclient.config.dxAlertConfig.host) {\r",
							"      pm.test(\"Status code is 400 for blank host in DxAlertConfig\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp host cannot be empty\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"    if (newclient.config.dxAlertConfig.user===\"\") {\r",
							"      pm.test(\"Status code is 400 for blank user in DxAlertConfig\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp username cannot be empty\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"     if (!newclient.config.dxAlertConfig.password) {\r",
							"      pm.test(\"Status code is 400 for blank password\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp password cannot be empty\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"     if (!newclient.config.dxAlertConfig.remoteDir) {\r",
							"      pm.test(\"Status code is 400 for blank remoteDir\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp remote directory cannot be empty in DxAlertConfig\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    }\r",
							"     if (!newclient.config.dxAlertConfig.institutionId) {\r",
							"      pm.test(\"Status code is 400 for blank institutionId\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Missing 'institutionId' \"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"     if (emailStartMatch === null) {\r",
							"      pm.test(\r",
							"        \"Status code is 400 for invalid emailAddresses-start\",\r",
							"        function() {\r",
							"          pm.expect(pm.response.text()).to.include(\r",
							"            \"Invalid email address\");\r",
							"        });\r",
							"        console.log(pm.response.text());\r",
							"    } \r",
							"    if (!emailStartMatch && emailStartMatch !== null) {\r",
							"      pm.test(\r",
							"        \"Status code is 400 for invalid emailAddresses-start\",\r",
							"        function() {\r",
							"          pm.expect(pm.response.text()).to.include(\r",
							"            \"Missingstart : email-id(s) for NotificationConfig setting\");\r",
							"        } );\r",
							"        console.log(pm.response.text());\r",
							"    } \r",
							"     if (emailCompleteMatch === null) {\r",
							"      pm.test(\"Status code is 400 for invalid emailAddresses-complete\",\r",
							"      function() {\r",
							"          pm.expect(pm.response.text()).to.include(\r",
							"            \"Invalid email address\");\r",
							"        });\r",
							"        console.log(pm.response.text());\r",
							"    }\r",
							"    if (!emailCompleteMatch && emailCompleteMatch!== null) {\r",
							"      pm.test(\"Status code is 400 for invalid emailAddresses-complete\",\r",
							"      function() {\r",
							"          pm.expect(pm.response.text()).to.include(\r",
							"            \"Missingcomplete : email-id(s)\");\r",
							"          });\r",
							"          console.log(pm.response.text());\r",
							"    }\r",
							"     if (emailLstMatch === null) {\r",
							"      pm.test(\"Status code is 400 for invalid emailAddresses-Lst\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Invalid email address\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"     if (!emailLstMatch && emailLstMatch !== null) {\r",
							"      pm.test(\"Status code is 400 for invalid emailAddresses-Lst\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Missinglst : email-id(s)\");\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"     if (emailErrorMatch === null) {\r",
							"      pm.test(\"Status code is 400 for invalid emailAddresses-error\",\r",
							"        function() {\r",
							"          pm.expect(pm.response.text()).to.include(\r",
							"              \"Invalid email address\");\r",
							"        });\r",
							"        console.log(pm.response.text());\r",
							"    } \r",
							"    if (!emailErrorMatch && emailErrorMatch !== null) {\r",
							"      pm.test(\"Status code is 400 for invalid emailAddresses-error\",\r",
							"        function() {\r",
							"          pm.expect(pm.response.text()).to.include(\r",
							"              \"Missingerror : email-id(s)\");\r",
							"        });\r",
							"        console.log(pm.response.text());\r",
							"    } \r",
							"    if (!newclient.config.notificationConfig.dneConfig.host) {\r",
							"      pm.test(\"Status code is 400 for dneConfig blank host\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp host cannot be empty in NotificationConfig\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"    if (newclient.config.notificationConfig.dneConfig.username===\"\") {\r",
							"      pm.test(\"Status code is 400 for dneConfig blank user\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp username cannot be empty\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"     if (!newclient.config.notificationConfig.dneConfig.password) {\r",
							"      pm.test(\"Status code is 400 for dneConfig blank password\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp password cannot be empty\"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    }\r",
							"     if (!newclient.config.notificationConfig.dneConfig.remoteDir) {\r",
							"      pm.test(\"Status code is 400 for dneConfig blank remoteDir\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Sftp remote directory cannot be empty \"\r",
							"        );\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    } \r",
							"   \r",
							"    if (setFlagdocTypeName) {\r",
							"      pm.test(\"Status code is 400 for docTypeName\", function() {\r",
							"        pm.expect(pm.response.text()).to.include(\r",
							"          \"Missing document type name\");\r",
							"      });\r",
							"      console.log(pm.response.text());\r",
							"    }\r",
							"    \r",
							" if (pm.response.code === 404) {\r",
							"    pm.test(\"Empty status code is 404 for null\", function() {\r",
							"      pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
							"    });\r",
							"    console.log(pm.response.text());\r",
							"  }\r",
							"  \r",
							"   pm.environment.clear();\r",
							"  postman.setNextRequest(\"deleteClient\"); \r",
							"} else\r",
							"  pm.test(\r",
							"    \"Status code is 400 Duplicate Client id \" + newclient.clientId,\r",
							"    function() {\r",
							"      pm.expect(getResponseText).to.include( \"ClientID \" + newclient.clientId + \" already existed\");\r",
							"      console.log(pm.response.text());\r",
							"    }\r",
							"  );\r",
							"  \r",
							"postman.setNextRequest(\"getClientById\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"clientId\": \"92167\",\n    \"name\": \"RBFCU\",\n    \"status\": \"activated\",\n    \"config\": {\n        \"dataRetentionMonths\": \"{{ramdomNumber}}\",\n        \"sftpConfig\": {\n            \"host\": \"elapzaridev02.onefiserv.net\",\n            \"port\": 22,\n            \"username\": \"ddadev\",\n            \"password\": \"ddaDev_01\",\n            \"remoteDir\": \"archive-e2e/file-upload/client-92167\"\n        },\n        \"dxAlertConfig\": {\n            \"host\": \"elapzaridev02.onefiserv.net\",\n            \"port\": 22,\n            \"username\": \"ddadev\",\n            \"password\": \"ddaDev_01\",\n            \"remoteDir\": \"archive-e2e/lst-upload/client-92167\",\n            \"institutionId\": \"92167\"\n        },\n        \"notificationConfig\": {\n            \"emailAddresses\": {\n                \"start\": [\n                    \"varsha.gupta@Fiserv.com\",\n                    \"victor.perez@Fiserv.com\",\n                    \"Kristina.Gin@Fiserv.com\"\n                ],\n                \"complete\": [\n                    \"varsha.gupta@Fiserv.com\",\n                    \"victor.perez@Fiserv.com\",\n                    \"Kristina.Gin@Fiserv.com\"\n                ],\n                \"lst\": [\n                    \"varsha.gupta@Fiserv.com\",\n                    \"victor.perez@Fiserv.com\",\n                    \"Kristina.Gin@Fiserv.com\"\n                ],\n                \"error\": [\n                    \"varsha.gupta@Fiserv.com\",\n                    \"victor.perez@Fiserv.com\",\n                    \"Kristina.Gin@Fiserv.com\"\n                ]\n            },\n            \"dneConfig\": {\n                \"host\": \"elapzaridev02.onefiserv.net\",\n                \"port\": 22,\n                \"username\": \"ddadev\",\n                \"password\": \"ddaDev_01\",\n                \"remoteDir\": \"archive-e2e/clp-upload/client-92167\"\n            }\n        },\n        \"documentTypes\": [\n            {\n                \"docTypeName\": \"NOTICE\",\n                \"docTypeMappingKeys\": [\n                    \"NOT\"\n                ],\n                \"documentIndexes\": [\n                    \"EDDDocumentType\",\n                    \"NoteType\",\n                    \"MemberAccountNumber\",\n                    \"AccountTypeNumber\",\n                    \"MemberName\",\n                    \"CycleDate\",\n                    \"OriginalFileName\",\n                    \"JobNumber\"\n                   \n                ],\n                \"searchPatternIndexes\": [\n                    [\n                        \"EDDDocumentType\",\n                        \"MemberAccountNumber\"\n                    \n                      \n                    ],\n                    [\n                        \"AccountTypeNumber\",\n                        \"JobNumber\"\n                        \n                    ]\n                ],\n                \"lstRules\": [\n                    \"$EDDDocumentType\",\n                    \"-\",\n                    \"$MemberAccountNumber\",\n                    \"~\",\n                    \"$CycleDate\"\n                ]\n            },\n            {\n                \"docTypeName\": \"STATEMENT\",\n                \"docTypeMappingKeys\": [\n                    \"STM\"\n                ],\n                \"documentIndexes\": [\n                    \"EDDDocumentType\",\n                    \"NoteType\",\n                    \"MemberAccountNumber\",\n                    \"AccountTypeNumber\",\n                    \"MemberName\",\n                    \"CycleDate\",\n                    \"OriginalFileName\",\n                    \"JobNumber\"\n                ],\n                \"searchPatternIndexes\": [\n                    [\n                        \"EDDDocumentType\",\n                        \"MemberAccountNumber\",\n                        \"MemberName\"\n                    ],\n                    [\n                        \"AccountTypeNumber\",\n                        \"MemberName\"\n                    ]\n                ],\n                \"lstRules\": [\n                    \"$EDDDocumentType\",\n                    \"-\",\n                    \"$MemberAccountNumber\"\n                ]\n            }\n        ]\n    }\n}"
				},
				"url": {
					"raw": "https://dda-client-e2e.apps.fog.onefiserv.net/v1/clients/",
					"protocol": "https",
					"host": [
						"dda-client-e2e",
						"apps",
						"fog",
						"onefiserv",
						"net"
					],
					"path": [
						"v1",
						"clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteClient",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca27d911-3e20-4405-a73e-7d46c3bd7659",
						"exec": [
							"//Victor I.P. purge client by client id.",
							"var getId = pm.variables.get(\"clientId\");",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Status code is 200 for Purged client, id:\" + getId, function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.text()).to.include(\"Purged client: \");",
							"    console.log(\"Purged client\" + \" client id: \" + getId);",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    pm.sendRequest(\"https://dda-client-e2e.apps.fog.onefiserv.net/v1/clients/\" + getId, function (err, response) {",
							"         pm.test(\"Status code is 404 for Client not found\" + \" Client id: \" + getId, function() {",
							"        pm.expect(pm.response.text()).to.include( \"Client not found\");",
							"        console.log(\"Status code is 404 for Client not found\" + \" client id: \" + getId);",
							"pm.variables.get(\"variable_key\");",
							"      });",
							"});",
							"pm.environment.set(\"variable_key\", \"variable_value\");",
							"}",
							" pm.environment.clear();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "*/*"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://dda-client-e2e.apps.fog.onefiserv.net/v1/clients/92167",
					"protocol": "https",
					"host": [
						"dda-client-e2e",
						"apps",
						"fog",
						"onefiserv",
						"net"
					],
					"path": [
						"v1",
						"clients",
						"92167"
					]
				}
			},
			"response": []
		}
	]
}
